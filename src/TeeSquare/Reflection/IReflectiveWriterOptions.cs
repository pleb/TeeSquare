using System;
using System.Reflection;
using TeeSquare.Writers;

namespace TeeSquare.Reflection
{
    public interface IReflectiveWriterOptions: ITypeScriptWriterOptions
    {
        /// <summary>
        /// A namer instance used to determine the name of a dotnet Type in TypeScript
        /// </summary>
        Namer Namer { get;  }
        /// <summary>
        /// An optional alternative namer used to determine the name used for imports. If set,
        /// types will be imported with ImportName as Name
        /// </summary>
        Namer ImportNamer { get; }
        /// <summary>
        /// Specifies flags to check for when reflecting properties
        /// </summary>
        BindingFlags PropertyFlags { get;  }
        /// <summary>
        /// Specifies flags to check for when reflecting methods
        /// </summary>
        BindingFlags MethodFlags { get;  }
        /// <summary>
        /// Delegate to determine if methods should be reflected on a type. Defaults to false
        /// </summary>
        Func<Type, bool> ReflectMethods { get;  }
        /// <summary>
        /// Delegate to determine if a single method should be reflected on a type. Defaults to true.
        /// Only checked if ReflectMethods returns true and the method matches MethodFlags
        /// </summary>
        Func<Type, MethodInfo, bool> ReflectMethod { get; }
        /// <summary>
        /// Strategy for rendering complex types. The default is to output them as interfaces but could
        /// be overridden to output classes
        /// </summary>
        WriteComplexType ComplexTypeStrategy { get;  }
        /// <summary>
        /// Delegate to write a custom header at the top of the file. Default is a comment about the
        /// code being autogenerated
        /// </summary>
        WriteHeader WriteHeader { get;  }
        /// <summary>
        /// Predicate for determining if a property should be treated as a union type discriminator.
        /// Defaults to checking for a TypeDiscriminatorAttribute.
        /// </summary>
        DiscriminatorPropertyPredicate DiscriminatorPropertyPredicate { get;  }
        /// <summary>
        /// For properties identified as a discriminator, this provider is used to obtain the value of
        /// that discriminator. Defaults to the value specified in the attribute if available, then
        /// falls back to the type name.
        /// </summary>
        DiscriminatorPropertyValueProvider DiscriminatorPropertyValueProvider { get;  }
        /// <summary>
        /// Container for holding reflected and imported types.
        /// </summary>
        TypeCollection Types { get; }
    }
}
